import { Button , ComboBox, HorizontalBox, GroupBox, CheckBox, VerticalBox} from "std-widgets.slint";

export global SelectPopUpSlots := {
    callback currentselect(int,int);
    callback cancel();
}

global selectitems := {
    property <[string]> cursor: ["showcursor", "notshow"] ;
    callback currentcursorindex(string) -> int;
    currentcursorindex(input) => {
        if (input == "showcursor") {
            return 1;
        } else {
            return 0;
        }
        return 0;
    }
    property <[string]> imagetype: ["png", "jpg","ppm"] ;
    callback currentimageindex(string) -> int;
    currentimageindex(input) => {
        if (input == "png") {
            return 0;
        } else if (input == "jpg"){
            return 1;
        } else {
            return 2;
        }
        return 0;
    }
}


export SelectPopUp := VerticalLayout {
    property <string> secursor : "showcursor";
    property <string> seimage : "png";
    GroupBox {
        title: "showcursor";
        VerticalBox {
            ComboBox { 
                model: selectitems.cursor;
                current-value: secursor;
                selected => {
                    secursor = current_value;
                }
            }

        }
    }
    GroupBox {
        title: "imagetype";
        VerticalBox {
            ComboBox { 
                model: selectitems.imagetype;
                current-value: seimage;
                selected => { 
                    seimage = current_value;
                }
            }
        }
    }
    HorizontalBox {
        alignment: end;
        Button {
            height: 30px;
            text: "Cancel";
            clicked => {
                SelectPopUpSlots.cancel();
            }
        }
        Button {
            height: 30px;
            text: "Apply";
            clicked => {
                SelectPopUpSlots.currentselect(
                    selectitems.currentcursorindex(secursor),
                    selectitems.currentimageindex(seimage)
                );
            }
        }
    }
}
